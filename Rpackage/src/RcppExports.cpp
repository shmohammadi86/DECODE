// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/DECODE.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// AssessFeatures
vec AssessFeatures(sp_mat A_mat, IntegerVector columns, int rand_sample_size, int rand_sample_no, int thread_no);
RcppExport SEXP _DECODE_AssessFeatures(SEXP A_matSEXP, SEXP columnsSEXP, SEXP rand_sample_sizeSEXP, SEXP rand_sample_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A_mat(A_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_size(rand_sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_no(rand_sample_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(AssessFeatures(A_mat, columns, rand_sample_size, rand_sample_no, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// AssessFeatures_betweenGroups
vec AssessFeatures_betweenGroups(sp_mat A_mat, IntegerVector columns_A, IntegerVector columns_B, int rand_sample_size, int rand_sample_no, int thread_no);
RcppExport SEXP _DECODE_AssessFeatures_betweenGroups(SEXP A_matSEXP, SEXP columns_ASEXP, SEXP columns_BSEXP, SEXP rand_sample_sizeSEXP, SEXP rand_sample_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A_mat(A_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type columns_A(columns_ASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type columns_B(columns_BSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_size(rand_sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_no(rand_sample_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(AssessFeatures_betweenGroups(A_mat, columns_A, columns_B, rand_sample_size, rand_sample_no, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// ProfileModule
vec ProfileModule(sp_mat A_mat, IntegerVector rows, int rand_sample_size, int rand_sample_no, int thread_no);
RcppExport SEXP _DECODE_ProfileModule(SEXP A_matSEXP, SEXP rowsSEXP, SEXP rand_sample_sizeSEXP, SEXP rand_sample_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A_mat(A_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_size(rand_sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_no(rand_sample_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(ProfileModule(A_mat, rows, rand_sample_size, rand_sample_no, thread_no));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DECODE_AssessFeatures", (DL_FUNC) &_DECODE_AssessFeatures, 5},
    {"_DECODE_AssessFeatures_betweenGroups", (DL_FUNC) &_DECODE_AssessFeatures_betweenGroups, 6},
    {"_DECODE_ProfileModule", (DL_FUNC) &_DECODE_ProfileModule, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_DECODE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
